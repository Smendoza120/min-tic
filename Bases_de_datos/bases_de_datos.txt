//Bases de datos en MySQL
/*
    -Conceptos de bases de datos
    -Descargar e instalar MySQL
    -Creacion de una base de datos
    -Conceptos de relaciones entre tablas
    -Relacion de uno a uno
    -Relacion de uno a muchos
    -Relacion de muchos a muchos
    -Insertar registros en las tablas
    -Modificar registros de una tabla
    -Eliminar registros de una tabla
    -Consultas en una tabla
    -Consultas más avanzadas con operadores
    -Consultas en varias tablas
    -Vistas
    -Procedimientos almacenados
    -Triggers
*/

//Bases de datos
/*
    Es un almacen que nos permite guardar grandes cantidad de informacion de forma organizada, para luego la podamos 
    encontrarlos y utilizar facilmente, funciona como un repositorio.

    Modelos de bases de datos:

    -Bases de datos Jerárquicas
    -Bases de datos de red
    -Bases de datos transaccionales
    -Bases de datos relacionales (Modelo que veremos)
    -Bases de datos multidimensionales
    -Bases de datos orientadas a objetos
    -Bases de datos documentales
    -Bases de datos deductivas

    Gestores de bases de datos:

    -MySQL (Gestor a utilizar)
    -Microsoft SQL Server
    -Oracle
    -Microsoft Access
    -PostgreSQL
    -DB2
*/

//Creacion y eliminacion de una base de datos
/*
    Para la creacion de una base de datos tenemos que hacer lo siguiente: 

        -Escribimos el siguiente comando (create database), se le agrega el nombre deseado.
        -Para decirle al programa que usaremos la base de datos creada usamos el comando (use) y se le agrega el nombre 
        de nuestra base de datos.
        -Para eliminar una base de datos, lo hacemos con el siguiente codigo (drop) le agregamos el tipo de dato que 
        eliminaremos y le agregamos el nombre.  
*/

//Creacion de tablas
/*
    Para crear una tabla tenemos 2 formas de hacerlo, las cuales son las siguientes: 

    Primera forma: 
        -Agregamos el comando (create table) le agregamos el nombre y abrimos parentesis y finalizamos con punto y coma
        -Para agregar datos, lo haremos dentro de los parentesis, similar a como llenamos un objeto, con la diferencia 
        que tiene otra sintaxis, primero va el nombre, luego el tipo de dato, si sera una casilla de obligacion para 
        llenar o no, un dato extra que se refiere a un ejemplo de como se deberia llenar ese campo, y un extra que es
        lo que hara ese comando, si quiere sumar automaticamente o restar.

            create table producto(
                idProducto int auto_increment primary key,
                nombre varchar(50) not null,
                precio decimal(10,2) not null,
                fecha_venta date default '0000-00-00'
            );

        -Cuando agregamos un dato de tipo cadena, agregamos (varchar) y agregamos unos parentesis, donde indicaremos el 
        numero de caracteres que tendra.
        -Si tenemos un dato que no es entero agregamos la palabra (decimal) y en los parentesis podemos agregar 2 datos, 
        los cuales son el numero de datos que tendremos como enteros y con una coma le damos la cantidad de decimales que 
        tendra dicha casilla.
        -Para una fecha usamos la palabra (date) y como default agregamos una visual para llenar este campo.


        -Si vamos a mostrar la tabla usamos el comando (show tables) y nos mostrara las tablas que hemos creado.
        -Para mostrar el contenido de la tabla usamos el comando (show columns from) y agregamos el nombre de nuestra tabla.
        -Para eliminarla usamos el mismo comando visto el cual es (drop table) y agregamos el nombre de la tabla.

            show tables;  Mostrar tabla.
            
            show columns from producto; Mostrar las columnas de la tabla.

            drop table producto;  Eliminar tabla.

    Segunda forma:
        -Nos dirigimos al arbol donde tenemos los datos, dentro de nuestra base de datos, nos dirigimos a la seccion tabla.
        -Le damos click derecho y crear tabla, nos desplegara otro menu, donde llenaremos todos los datos que ya vimos.
        -Para mostrar la tabla haremos lo mismo que vimos hace un momento.

    Para mostrar los datos de una tabla agregamos la palabra (select) luego un asterisco y agregamos la palabra (from) y agregamos 
    el nombre de nuestra tabla, si nos aparece un error, agregamos una ruta relativa:

        select * from tienda.producto;
*/

//Relaciones entre tablas
/*
    Si queremos que los datos de nuestras tablas se puedan seleccionar, encontrar y procesar de una manera rapida, es 
    necesario que las tablas no se encuentren aisladas unas de otras.

    Para relacionar las tablas usaremos las columnas pueden tener un nombre diferente pero para que haya una relacion tienen
    que ser del mismo tipo de datos.

    Hay 3 tipos de relaciones:
        -Relacion de uno a uno
        -Relacion de uno a muchos
        -Relacion de muchos a muchos

    Relacion de uno a uno:
        Estas se dan cuando un registro esta relacionado con otro y con ese solamente y a su vez este segundo tambien estara
        relacionado solamente con el primero.

                                        Relacion uno a uno
                                Galletas                Codigo barras
                            idProducto                  Codigo_Barras
                            nombre VARCHAR(50)          idCodigo INT
                            precio DECIMAL(10,2)        serial VARCHAR (30)
                            fecha_venta DATE            idProducto INT
    
        En este ejemplo podemos ver como tenemos una relacion de uno a uno, lo que los une es el (idProducto)

    Relacion uno a muchos:
        Este estara relacionado solo con otro, pero este segundo podria estar relacionado con mas de uno.

                                        Relacion uno a muchos
                                Galletas                   Categoria   
                            idProducto                  idCategoria INT
                            nombre VARCHAR(50)          nombre VARCHAR (30)
                            precio DECIMAL(10,2)        
                            fecha_venta DATE 
                            idCategoria INT      

        Lo que refleja este ejemplo es que solo tenemos una categoria y esta categoria podria ir a muchos mas productos.  

    Relacion de muchos a muchos:
        En las relaciones muchos a muchos a cada registro de la tabla A, se le pueden asociar varios registros de la tabla B,
        y cada registro de la tabla B pueden estar relacionado con mas de un registro de la tabla A.   

                                        Relacion muchos a muchos
                            Producto                  Union                 Proveedor
                        idProducto                 idUnion INT             idProveedor
                        nombre VARCHAR(50)         idProducto INT          nombre VARCHAR(30)
                        precio DECIMAL(10,2)       idProveedor INT     
                        fecha_venta DATE  

        Para tener una relacion de muchos a muchos, lo hacemos con un intermediario, donde se uniran varias tablas, el ejemplo
        se lee de la siguiente manera, 1 producto lo pueden traer muchos proveedores, y un proveedor puede tener muchos 
        productos y la tabla union, hace como un puentre entre una tabla y otra.       

    Para tener una explicacion mas visual, el aplicativo nos permite hacerlo, haremos el siguiente paso a paso:

        -Nos dirigimos a la seccion (Database).
        -Le damos click en (Reverse Enginner).
        -Le damos next hasta que nos aparezca las bases de datos que tenemos y seleccionamos la que nos interesa.
        -Hacemos click hasta el final de las pantallas y nos dara una mejor visual de nuestras tablas y como se relacionan.                   
*/

//Insertar registros en las tablas
/*
    Para poder ingresar registros en las tablas se puede hacer de 3 maneras: 

        Primera manera:
        -usamos la palabra (insert) luego (into) ingresamos el nombre de la tabla que queremos modificar, le agregamos la 
        palabra (values) y como parametros le agregamos los datos, el primero se agrega como nulo ya que tiene un contador
        este se lo agregamos cuando creamos la tabla.

            insert into categoria values (null, 'Bebidas');

        Segunda manera:
        -Usamos la palabra (insert) y (into) luego el nombre de la tabla seguido de ello agregamos un parentesis con el nombre  
        de la columna que queremos insertar, agregamos la palabra (values) y le pasamos los datos que queremos agregar.

            insert into categoria (nombre) values ('Aceites');

        Tercera manera:
        -Seguimos usando las 2 palabras (insert y into) seguido de ello agregamos el nombre de la tabla, dentro de un parentessis
        agregamos los datos que queremos modificar y si son varios los separamos con una coma, luego agregamos un patentesis y 
        agregamos los datos, si queremos agregar mas de una fila, lo que hacemos es separar los parentesis con un coma.

            insert into codigobarras (serial, idProducto) values
            ("1231546532", 1), ("4545676", 2), ("4564786", 3), ("455467", 4); 
*/

//Modificar registros de una tabla
/*
    Para modificar una fina de nuestra base de datos, lo que tenemos que hacer es agregar el nombre (update) y llamamos a la 
    tabla que queremos modificar luego agregamos la palabra (set) y le damos el nombre de la columna que queremos modificar
    la igualamos y agregamos el resultado que queremos agregar, pero tiene que ser del mismo tipo de dato por ultimo agregamos  
    la palabra (where) y le damos el id de la fila que esta mos modificando.

            update tienda.categoria set nombre = "Bebidas con gas" where idCategoria = 1;

    si queremos hacer mas de un cambio lo que hacemos es separalos por una coma, de esta manera: 

            update tienda.producto set nombre = "Gaseosa Pepsi", precio = 5.20 where idProducto = 2; 
*/

//Eliminar registros de una tabla
/*
    Para eliminar un producto necesitamos hacer el siguiente codigo: 

        delete from producto where idProducto = 14;

        -agregamos la palabra (delete) despues (from) seleccionamos la tabla, agregamos la palabra (where) y agregamos la 
        columna que queremos eliminar;

    Recuerda que si eliminas una fila de la tabla y esta tenia alguna relacion, esta eliminacion afectara a cada tabla, por lo que tendrias todo actualizado de una excelente manera.
*/

//Consultas dentro de las tablas
/*
    Hay varias maneras de hacer consultas dentro de las tablas, por lo que aqui veremos algunas:

        Busqueda global
            select * from producto;
        
            Esta busqueda ya la vimos, esta es una busqueda global, lo que quiere decir que nos mostrara todos los datos de 
            nuestra tabla.

        Alias temporal
            select nombre as 'nombre del producto', precio, cantidad from producto;

            Con este tipo de busquedas, le podemos agregar un nombre temporal a nuestra consulta.

        Busqueda exacta
            select nombre, precio from producto;

            Esta busqueda es para buscar una fila en concreto. 

        Consultas filtradas
            select nombre, precio, cantidad from producto where cantidad = 100;

            Con estas consultas buscamos filtrar los datos de mayor interes en ese momento.
        
        Busqueda de la menor y mayor cantidad
            select min(cantidad) as 'cantidad minima', max(cantidad)as 'cantidad maxima' from producto;

            Si queremos saber el mayor o menor dato de una tabla esta es la manera correcta de hacerlo.

        Busaqueda ordenada ascendente
            select nombre, precio from producto order by nombre asc;

            Si queremos hacer una busqueda y que esta este organizada de manera ascendente, lo haremos con este codigo.

        Busqueda ordenada decendente
            select nombre, precio from producto order by nombre desc;

            tambien podemos hacer consultas de manera decendente y se logran con este codigo.
*/

//Consultas mas avanzadas con operaciones
/*
    Este tipo de consultas tienen operadores logicos.

        Operador and (&&)
            select * from producto where idCategoria = 1 and cantidad >= 150;
            
            Esta busqueda hace una busqueda mas exacta de 2 o mas filas.
            
        Operador or (||)    
            select * from producto where idCategoria = 1 or cantidad > 100; 

            Esta busqueda hace una busqueda de cualquier opcion que sea verdadera.

        Diferente de
            select * from producto where idCategoria != 1;

            Esta busquda se encarga de buscar una fila diferente a la seleccionada, se puede hacer de 2 maneras con (!=) o (<>).

        Operador mayor, menor, mayor igual o menor igual
            select * from producto where idCategoria > 100;

            Esta busqueda funciona para hacer busquedas entre rangos.

        Busquedas vacias
            select * from producto where precio is null;

            Con esta busqueda podemos mirar los campos vacios, tenemos que agregar la palabra (is null).

        Busquedas diferentes a vacias
            select * from producto where precio is not null;

            Con esta busqueda obtenemos los datos que sean diferentes de vacio, para este agregamos las palabras (is not null)

        Busquedas entre rangos    
            select * from producto where precio between 2 and 5;

            En esta busqueda seleccionamos 2 rangos y nos dara los datos que se encuentren dentro de ellos, usamos la palabra (between).

        Busqueda fuera de 2 rangos
            select * from producto where precio not between 2 and 5;

            Esta busqueda pone 2 rangos y excluye los datos que se encuentran dentro de ese rango y nos muestra los demas
            para este usamos la palabra (not between).

        Busqueda con operadores logicos
            select * from producto where cantidad = 50 + 50 + 50;

            Podemos hacer busquedas con sumas, restas, ETC, solo hacemos una suma. 

        Busqueda con filtros de palabras
            select * from producto where nombre like 'Gaseosa%';

            Para hacer un filtro, agregamos la palabra (like) y dentro de una cadena de caracteres agregamos la palabra que 
            queremos buscar y la finalizamos con un (%).

        Busqueda con la letra final de una palabra
            select * from producto where nombre like '%o';

            Esta busqueda es similar a la pasada, agregamos la palabra (like) y dentro de comillas agregamos un porcentaje
            y agregamos la letra deseada.

        Busqueda con letras en medio
            select * from producto where nombre like '%osa%'

            En esta busqueda tambien haremos uso del (like) y los porcentajes, entonces agregamos la palabra y dentro de las 
            comillas agregamos un porcentaje, las letras que queremos buscar y finalizamos con un porcentaje.
*/

//Consultas en varias tablas
/*
    Para hacer consultas en varias tablas haremos lo siguiente: 

            select * from producto as p inner join categoria as c on p.idCategoria = c.idCategoria where p.cantidad > 100;

        -Agregamos los mismos nombres los cuales son (select) y (from).
        -Agregamos la lista donde queremos hacer la consulta, le agregamos un alias en este caso sera (p).
        -Para unir las consultas agregamos (inner join) y agregamos la lista que queremos consultar. 
        -Luego agregamos (on) y agregamos en que coinciden o porque se unen las tablas, en este ejemplo lo que los une son 
        el (idCategoria).
        -Se pueden hacer filtros logicos, como en el ejemplo pasado, solo agregamos la palagra (where) y agregamos el filtro
        deseado.

        -Se pueden unir mas listas si lo deseamos, solo tenemos que hacer el mismo prosedimiento, el cual es agregar 
        (inner join) y agregamos la lista que queremos consultar, hacemos la comparacion entre las listas que se parecen y 
        de esta manera hacemos una consulta con varias tablas.

        -Recuerda que en el * van los datos que queremos mostrar, si queremos mostrar datos especificos de las tablas solo 
        agregamos el nombre del alias y como si se tratara de un metodo llamamos lo que queremos mostrar, lo mostraremos mejor
        con un ejemplo.

            select p.nombre, p.precio, p.cantidad, c.nombre as 'Categoria' from producto as p 
            inner join categoria as c on p.idCategoria;
*/

//Vistas
/*
    Es una forma sensilla de guardar una consulta muy extensa, donde ya consultamos mas de 1 tabla a la vez, mostraremos un 
    ejemplo y explicaremos que hace.

            create view vista_producto_categoria as
            select p.nombre, p.precio, p.cantidad, c.nombre as 'categoria' from 
            producto as p
            inner join categoria as c on p.idCategoria = c.idCategoria;

        -Tenemos esta consulta que nos busca el nombre, precio y cantidad de la tabla producto y el nombre de la tabla 
        categoria y estas consultas las igualamos por la columna similar.
        -Para crear una vista y que nos guarde esta consulta agregamos el nombre (create view) y le agregamos un nombre 
        agregamos as y luego la consulta, al ejecutarla nos aparecera un apartado de vistas, donde se encuentra guardada esta   
        consulta que acabamos de hacer. 
        -Para hacer uso de esta consulta, solo tenemos que agregar (select * from) y el nombre de la consulta.

            select * from vista_producto_categoria;
*/

//Procedimientos almacenados
/*
    Esto es similar a un metodo en java, son determinadas acciones que se ejecutan cuando uno lo indica, primero compariremos
    el ejemplo y explicaremos como funciona.

            delimiter //
            create procedure productosXcategoria (in id int) 
            begin
                select * from producto where idCategoria = id;
            end//
            delimiter ; 

        -Agregamos la palabra (delimiter //) con 2 slash.
        -Agregamos la palabra (create procedure) y le agregamos un nombre, si queremos agregarle parametros a este Procedimiento
        abrimos parentesis y agregamos la palabra (in) el nombre que queremos buscar y el tipo de dato, si queremos tener mas 
        parametros solo basta con agregar una coma y agregar nuevamente la palabra (in) y el tipo de dato.
        -Agregamos 2 palabras que nos marcara el inicio y fin del procedimiento (begin y end) y dentro de estas 2 palabras 
        ponemos lo que queremos hacer, en este ejemplo, queremos hacer una consulta y le agregamos un filto, que nos dice 
        muestranos el id que agregaras en el parametro.
        -Finalizamos con la palabra delimiter, agregamos un espacio y colocamos un punto y coma, no se pude dejar pegado ya 
        que nos arroja un error.
        -Debajo de la seccion de vistas, nos generara el procedimiento, para hacer uso de el, agregamos la palabra (call) y 
        agregamos el nombre del procedimiento:

            call productosXcategoria(1);

        -Se le agrega un parametro ya que asi fue como lo indicamos y si ejecutamos, hara la funcion que le pusimos, en este 
        caso nos mostrara la tabla producto donde la categoria es igual a 1.

        -Para eliminar una tabla o una vista hacemos lo siguiente:

            drop procedure productosXcategoria;
            drop view vista_5tablas; 

        -Agregamos la palabra (drop) seguido de ello agregamos de que archivo se trata si es de una vista o un procedimiento y
        agregamos el nombre, cuando ejecutemos estos se borraran.
*/

//Triggers
/*
    Son eventos que se ejecutan automaticamente cuando se cumpla cierta accion, estos eventos se pueden ejecutar antes o despues
    de una determinada accion, lo veremos mejor con un ejemplo.

            Delimiter |
            create trigger insertarTemp before insert on categoria
            for each row
            begin 
                insert into temporal (categoria) values (new.nombre);
            end |

        -Agregamos la palabra (Delimiter |) y tambien agregamos este simbolo, es el mismo del or.
        -Agregamos (create trigger) agregamos el nombre que deseamos. 
        -Luego le decimos si queremos que se ejecute antes (before) o despues (after) y agregamos (on) para que le diga al 
        programa antes o despues de que se ejecutara.
        -Agregamos (for each row), le estamos diciendo que agrege una fila, luego agregamos las palabras (begin end) y dentro
        de estas agregamos lo que queremos que haga, para este ejemplo queremos que inserte un nuevo nombre a la tabla 
        temporal en la fila categoria.
        -Ejecutamos esta linea.

        Ahora si agregamos un nuevo elemento a nuestra tabla categoria, automaticamente la tabla temporal hara lo mismo, esto
        es especialmente util, si tenemos tablas donde tenemos que llenar datos en comun, entonces hacemos un trigger y lo hara
        en las otras tablas tambien.
*/

//Respaldo y restauracion de una base de datos en MySQL
/*
    Para poder pasar los datos de una computadora a otra, o si queremos formatear la computadora sin que los registros se nos
    dañen hacemos lo siguiente.

        -Hacer una backup o una copia de respaldo, nos dirigimos a (server), luego (Data export).
        -Seleccionamos la base de datos.
        -Seleccionamos las tablas que queremos.  
        -Podemos seleccionar si queremos hacer el respaldo en una carpeta o si queremos guardarlo en un documento.
        -Lo mas recomendable es hacerlo en un documento y podemos seleccionar la ruta donde ira la base de datos, podemos 
        modificar el nombre si asi lo deseamos.
        -Cuando ya modificamos la configuarion, le damos al boton de exportar. 
        -En el respaldo guarda absolutamente todo, como datos, tablas, ETC.

    Si nos encontramos en otra computadora o ya terminamos de formatear la nuestra, hacemos lo siguiente: 
    
        -Nos dirigirnos al aplicativo. 
        -Vamos a la seccion de (server), luego a (Data import).
        -Seleccionamos el archivo donde guardamos los datos exportados y lo abrimos.
        -Nos pedira en donde queremos guardar esta base de datos, lo podemos hacer en una existente o crear una nueva.
        -Si creamos una nueva, la buscamos en el listado y le damos a (start import).
        -Actualizamos y ya nuestros datos estaran registrados, ya podemos hacer uso del aplicativo como haciamos antes.
*/

//Pintar una imagen en un JPanel
/*
    Para pintar una imagen en un panel haremos lo siguiente: 

        -Creamos nuestro (JFrame).
        -Creamos 2 variables, una para el ancho y la otra para el alto, las igualamos al panel y obtenemos el ancho y alto.
        -Creamos otra variable, la cual contendra la ruta de nuestra imagen. 

            int ancho = panelImagen.getWidth();
            int alto = panelImagen.getHeight();
            
            String ruta = "/imagenes/baloncesto.png";

        -Creamos una clase que herede del (JPanel).
        -Creamos una variable llamada ruta.
        -Hacemos un constructor de la clase y como parametros le agregamos el ancho, alto y la ruta.
        -Llamamos al tamaño y le pasamos como parametros el ancho y el alto.
        -Llamamos a la ruta y la igualamos a la ruta.
        -Creamos un metodo publico que nos retorne vacio y le agregamos el nombre (paint) y le pasamos como parametros 
        (Graphics g).
        -Agregamos la clase (Dimension), le agregamos un nombre y lo igualamos al tamaño,
        -Creamos una imagen, le agregamos el nombre y la instanciamos, como parametro tomamos la clase y le pasamos el metodo
        para obtener el recurso (getClass().getResourse()) y como parametro le pasamos la ruta.
        -Llamamos a la (g) y le pasamos el metodo (drawImage) y como parametro, obtenemos la imagen, le agregamos el tamaño 0
        tanto a largo como a ancho, luego nos piden el largo y ancho de la caja, entonces llamamos al tamaño y le pasamos los
        parametros de ancho y alto y por ultimo agregamos null.
        -Agregamos el metodo (setOpaque) y lo dejamos en false. 
        -Llamamos al metodo super y le pasamos el metodo (paintComponent) y como parametro agregamos la (g).

            public class Imagen extends javax.swing.JPanel{
                private String ruta;
                
                public Imagen(int ancho, int alto, String ruta){
                    this.setSize(ancho, alto);
                    this.ruta = ruta;
                }
                
                @Override
                public void paint(Graphics g){
                    Dimension tamaño = getSize();
                    ImageIcon img = new ImageIcon(getClass().getResource(ruta));
                    g.drawImage(img.getImage(), 0, 0, tamaño.width, tamaño.height, null);
                    setOpaque(false);
                    super.paintComponent(g);
                }
            }

        -Volvemos al (JFrame) aqui creamos una imagen, la cual le pasamos los parametros de ancho, alto y la ruta, llamamos al
        panel de la imagen y añadimos la imagen.
        -Volvemos a llamar al panel y le pasamos el metodo (repaint).

            public Ventana() {
                initComponents();
                setLocationRelativeTo(null);
                
                int ancho = panelImagen.getWidth();
                int alto = panelImagen.getHeight();
                
                String ruta = "/imagenes/baloncesto.png";
                
                Imagen imagen = new Imagen(ancho, alto, ruta);
                panelImagen.add(imagen);
                panelImagen.repaint();  
            }

*/

//Seleccionar una imagen con JFileChooser
/*
    En esta seccion seguiremos trabajando con el ejemplo pasado, por lo que agregaremos un boton, para que nos muestre todos
    los archivos que tenemos en la computadora, pero que esten filtrados por (png y jpg), y cuando escojamos la imagen, esta
    se agregue a nuestro panel. 

        -Dentro de nuestro boton agregamos la clase (JFileChooser) le agregamos un nombre el cual sera escoger y la 
        instanciamos.
        -Llamamos a escoger y le pasamos el metodo (setFileSelectionMode), como parametro agregamos (JFileChooser) y le 
        pasamos el metodo (FILES_AND_DIRECTORIES), esto se hace para establecer el modelo.
        -Ahora aplicaremos el filtro, por lo cual llamaremos a la clase (FileNameExtensionFilter), le agregamos un nombre 
        el cual es filtro y la instanciamos, como parametros le pasamos 2 cosas, la primera es como se vera el filtro y el 
        otro es para hacer el respectivo filtro.
        -Llamamos a escoger y le pasamos el metodo (setFileFilter) y como parametro le pasamos el nombre del filtro. 
        -Creamos una variable esta sera entera y la igualamos a escoger y le pasamos el metodo (showOpenDialog) y como 
        parametro le agregamos (this), esto se hace para saber cual opcion fue seleccionada.
        -Haremos una condicional, la cual dira si el usuario escogio aceptar.
        -Llamamos a la clase (File) le damos un nombre en este caso se llamara archivo y la igualamos a escoger y le pasamos
        el metodo (getSelectedFile), esto se hace para obtener el archivo seleccionado.
        -Luego creamos otra variable la cual sera para la ruta del archivo seleccionado, esta la igualamos a archivo y le 
        pasamos el metodo (getAbsolutePath).
        -Lo demas sera agregar el ancho, alto, agregar la imagen y pasandole los mismos parametros, añadirlo al panel y 
        llamamos al metodo. 

            private void botonCargarActionPerformed(java.awt.event.ActionEvent evt) {                                            
                JFileChooser escoger = new JFileChooser();
                escoger.setFileSelectionMode(JFileChooser.FILES_AND_DIRECTORIES);//Establecemos el modelo
                FileNameExtensionFilter filtro = new FileNameExtensionFilter("*png", "png");
                FileNameExtensionFilter filtro2 = new FileNameExtensionFilter("*.jpg", "jpg");
                escoger.setFileFilter(filtro);
                escoger.setFileFilter(filtro2);
                
                int seleccion = escoger.showOpenDialog(this);//Darnos cuenta cual a sido la opcion seleccionada
                
                if(seleccion == JFileChooser.APPROVE_OPTION){ //Si el usuario escogio aceptar
                    File archivo = escoger.getSelectedFile(); //Obtenemos el archivo seleccionado
                    String ruta = archivo.getAbsolutePath(); //Obtenemos la ruta del archivo seleccionado
                    
                    int ancho = panelImagen.getWidth();
                    int alto = panelImagen.getHeight();
                    
                    Imagen imagen = new Imagen(ancho, alto, ruta);
                    panelImagen.add(imagen);
                    panelImagen.repaint();
                } 
            }   

        -En la parte de la imagen, lo unico que cambiamos es la ruta, como la ruta ya no se la damos antes, si no que sera 
        seleccionada.
        -Llamamos a la clase (Image), le agregamos un nombre y la instanciamos con (ImageIcon), como parametro le agregamos 
        la ruta y le damos la imagen con el metodo (getImage).
        -Para dibujarla, solo le pasamos el nombre de la imagen creada sin parametro y el resto igual.

            public class Imagen extends javax.swing.JPanel{
                private String ruta;
                
                public Imagen(int ancho, int alto, String ruta){
                    this.setSize(ancho, alto);
                    this.ruta = ruta;
                }
                
                @Override
                public void paint(Graphics g){
                    Dimension tamaño = getSize();
                    //ImageIcon img = new ImageIcon(getClass().getResource(ruta));
                    Image img = new ImageIcon(ruta).getImage();
                    
                    g.drawImage(img, 0, 0, tamaño.width, tamaño.height, null);
                    setOpaque(false);
                    super.paintComponent(g);
                }
            }   
*/

//Guardar una imagen en una BD
/*

*/

//Mostrar una imagen guardada en una BD
/*

*/

//Reportes en PDF, descargar iReport
/*
    Necesitamos un puging 
*/